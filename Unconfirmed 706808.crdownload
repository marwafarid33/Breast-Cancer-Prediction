# -*- coding: utf-8 -*-
"""Untitled23.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UvkF2O5uMkyYIyzCey7Ap58J4V7JAYfR
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
import shap

data = pd.read_csv("breast-cancer.csv")
data.head()

print("Data Overview:")
print(data.info())
print(data.describe())

data['diagnosis'] = data['diagnosis'].map({'B': 0, 'M': 1})

plt.figure(figsize=(12, 10))
sns.heatmap(data.corr(), annot=False, fmt=".2f", cmap="coolwarm")
plt.title("Correlation Heatmap")
plt.show()

X = data.drop(['diagnosis'], axis=1)
y = data['diagnosis']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

logistic_model = LogisticRegression(max_iter=1000, random_state=42)
logistic_model.fit(X_train, y_train)

def predict_cancer(user_input):

    input_data = pd.DataFrame([user_input], columns=X.columns)

    prediction = logistic_model.predict(input_data)[0]
    probability = logistic_model.predict_proba(input_data)[0][1]  # Probability of malignant (1)

def predict_cancer(user_input):
    
    input_data = pd.DataFrame([user_input], columns=X.columns)

    
    prediction = logistic_model.predict(input_data)[0]
    probability = logistic_model.predict_proba(input_data)[0][1]  # Probability of malignant (1)

    
    if prediction == 1:
        return f"The result indicates cancer (Malignant) with a probability of {probability:.2%}."
    else:
        return f"The result indicates no cancer (Benign) with a probability of {1 - probability:.2%}."


print("Enter values for the following features:")


user_input = {}
for feature in X.columns:
    user_input[feature] = float(input(f"{feature}: "))


result = predict_cancer(user_input)
print("\nPrediction Result:")
print(result)
